// This file is autogenerated by the hyperdispatch compiler
/* eslint-disable camelcase */

const { c, b4a, assert } = require('hyperdispatch/runtime')
const { version, getEncoding, setVersion } = require('./messages.js')

const defaultVersion = version

class Router {
  constructor() {
    this._handler0 = null
    this._handler1 = null
    this._handler2 = null
    this._handler3 = null
    this._handler4 = null
    this._handler5 = null
    this._handler6 = null
    this._handler7 = null
    this._handler8 = null
    this._handler9 = null
    this._handler10 = null
    this._handler11 = null
    this._handler12 = null
    this._handler13 = null
    this._handler14 = null
    this._handler15 = null
    this._handler16 = null

    this._missing = 17
  }

  add(name, handler) {
    switch (name) {
      case '@autonote/remove-writer':
        this._handler0 = handler
        break
      case '@autonote/add-writer':
        this._handler1 = handler
        break
      case '@autonote/update-profile':
        this._handler2 = handler
        break
      case '@autonote/create-group':
        this._handler3 = handler
        break
      case '@autonote/update-group':
        this._handler4 = handler
        break
      case '@autonote/delete-group':
        this._handler5 = handler
        break
      case '@autonote/create-page':
        this._handler6 = handler
        break
      case '@autonote/update-page':
        this._handler7 = handler
        break
      case '@autonote/delete-page':
        this._handler8 = handler
        break
      case '@autonote/add-fileref':
        this._handler9 = handler
        break
      case '@autonote/delete-fileref':
        this._handler10 = handler
        break
      case '@autonote/add-invite':
        this._handler11 = handler
        break
      case '@autonote/del-invite':
        this._handler12 = handler
        break
      case '@autonote/create-block':
        this._handler13 = handler
        break
      case '@autonote/update-block':
        this._handler14 = handler
        break
      case '@autonote/delete-block':
        this._handler15 = handler
        break
      case '@autonote/apply-operation':
        this._handler16 = handler
        break
      default:
        throw new Error('Cannot register a handler for a nonexistent route: ' + name)
    }
    this._missing--
  }

  _checkAll() {
    assert(this._handler0 !== null, 'Missing handler for "@autonote/remove-writer"')
    assert(this._handler1 !== null, 'Missing handler for "@autonote/add-writer"')
    assert(this._handler2 !== null, 'Missing handler for "@autonote/update-profile"')
    assert(this._handler3 !== null, 'Missing handler for "@autonote/create-group"')
    assert(this._handler4 !== null, 'Missing handler for "@autonote/update-group"')
    assert(this._handler5 !== null, 'Missing handler for "@autonote/delete-group"')
    assert(this._handler6 !== null, 'Missing handler for "@autonote/create-page"')
    assert(this._handler7 !== null, 'Missing handler for "@autonote/update-page"')
    assert(this._handler8 !== null, 'Missing handler for "@autonote/delete-page"')
    assert(this._handler9 !== null, 'Missing handler for "@autonote/add-fileref"')
    assert(this._handler10 !== null, 'Missing handler for "@autonote/delete-fileref"')
    assert(this._handler11 !== null, 'Missing handler for "@autonote/add-invite"')
    assert(this._handler12 !== null, 'Missing handler for "@autonote/del-invite"')
    assert(this._handler13 !== null, 'Missing handler for "@autonote/create-block"')
    assert(this._handler14 !== null, 'Missing handler for "@autonote/update-block"')
    assert(this._handler15 !== null, 'Missing handler for "@autonote/delete-block"')
    assert(this._handler16 !== null, 'Missing handler for "@autonote/apply-operation"')
  }

  async dispatch(message, context) {
    if (this._missing > 0) {
      this._checkAll()
    }

    setVersion(defaultVersion)

    const op = b4a.isBuffer(message) ? decode(message) : message

    switch (op.id) {
      case 0:
        return this._handler0(op.value, context)
      case 1:
        return this._handler1(op.value, context)
      case 2:
        return this._handler2(op.value, context)
      case 3:
        return this._handler3(op.value, context)
      case 4:
        return this._handler4(op.value, context)
      case 5:
        return this._handler5(op.value, context)
      case 6:
        return this._handler6(op.value, context)
      case 7:
        return this._handler7(op.value, context)
      case 8:
        return this._handler8(op.value, context)
      case 9:
        return this._handler9(op.value, context)
      case 10:
        return this._handler10(op.value, context)
      case 11:
        return this._handler11(op.value, context)
      case 12:
        return this._handler12(op.value, context)
      case 13:
        return this._handler13(op.value, context)
      case 14:
        return this._handler14(op.value, context)
      case 15:
        return this._handler15(op.value, context)
      case 16:
        return this._handler16(op.value, context)
      default:
        throw new Error('Handler not found for ID:' + id)
    }
  }
}

function encode(name, message, { version = defaultVersion } = {}) {
  const state = { buffer: null, start: 0, end: 0 }

  const route = getRouteByName(name)
  setVersion(version)

  c.uint.preencode(state, route.id)
  route.enc.preencode(state, message)

  state.buffer = b4a.allocUnsafe(state.end)
  c.uint.encode(state, route.id)
  route.enc.encode(state, message)

  return state.buffer
}

function decode(buffer, { version = defaultVersion } = {}) {
  const state = { buffer, start: 0, end: buffer.length }

  const id = c.uint.decode(state)
  const route = getRouteById(id)
  setVersion(version)

  const value = route.enc.decode(state)
  return { id, name: route.name, value }
}

const route0 = {
  name: '@autonote/remove-writer',
  id: 0,
  enc: getEncoding('@autonote/writer')
}

const route1 = {
  name: '@autonote/add-writer',
  id: 1,
  enc: getEncoding('@autonote/writer')
}

const route2 = {
  name: '@autonote/update-profile',
  id: 2,
  enc: getEncoding('@autonote/profile')
}

const route3 = {
  name: '@autonote/create-group',
  id: 3,
  enc: getEncoding('@autonote/group')
}

const route4 = {
  name: '@autonote/update-group',
  id: 4,
  enc: getEncoding('@autonote/group')
}

const route5 = {
  name: '@autonote/delete-group',
  id: 5,
  enc: getEncoding('@autonote/delete')
}

const route6 = {
  name: '@autonote/create-page',
  id: 6,
  enc: getEncoding('@autonote/page')
}

const route7 = {
  name: '@autonote/update-page',
  id: 7,
  enc: getEncoding('@autonote/page')
}

const route8 = {
  name: '@autonote/delete-page',
  id: 8,
  enc: getEncoding('@autonote/delete')
}

const route9 = {
  name: '@autonote/add-fileref',
  id: 9,
  enc: getEncoding('@autonote/fileref')
}

const route10 = {
  name: '@autonote/delete-fileref',
  id: 10,
  enc: getEncoding('@autonote/delete')
}

const route11 = {
  name: '@autonote/add-invite',
  id: 11,
  enc: getEncoding('@autonote/invite')
}

const route12 = {
  name: '@autonote/del-invite',
  id: 12,
  enc: getEncoding('@autonote/invite')
}

const route13 = {
  name: '@autonote/create-block',
  id: 13,
  enc: getEncoding('@autonote/block')
}

const route14 = {
  name: '@autonote/update-block',
  id: 14,
  enc: getEncoding('@autonote/block')
}

const route15 = {
  name: '@autonote/delete-block',
  id: 15,
  enc: getEncoding('@autonote/block')
}

const route16 = {
  name: '@autonote/apply-operation',
  id: 16,
  enc: getEncoding('@autonote/operation')
}

function getRouteByName(name) {
  switch (name) {
    case '@autonote/remove-writer':
      return route0
    case '@autonote/add-writer':
      return route1
    case '@autonote/update-profile':
      return route2
    case '@autonote/create-group':
      return route3
    case '@autonote/update-group':
      return route4
    case '@autonote/delete-group':
      return route5
    case '@autonote/create-page':
      return route6
    case '@autonote/update-page':
      return route7
    case '@autonote/delete-page':
      return route8
    case '@autonote/add-fileref':
      return route9
    case '@autonote/delete-fileref':
      return route10
    case '@autonote/add-invite':
      return route11
    case '@autonote/del-invite':
      return route12
    case '@autonote/create-block':
      return route13
    case '@autonote/update-block':
      return route14
    case '@autonote/delete-block':
      return route15
    case '@autonote/apply-operation':
      return route16
    default:
      throw new Error('Handler not found for name: ' + name)
  }
}

function getRouteById(id) {
  switch (id) {
    case 0:
      return route0
    case 1:
      return route1
    case 2:
      return route2
    case 3:
      return route3
    case 4:
      return route4
    case 5:
      return route5
    case 6:
      return route6
    case 7:
      return route7
    case 8:
      return route8
    case 9:
      return route9
    case 10:
      return route10
    case 11:
      return route11
    case 12:
      return route12
    case 13:
      return route13
    case 14:
      return route14
    case 15:
      return route15
    case 16:
      return route16
    default:
      throw new Error('Handler not found for ID: ' + id)
  }
}

function dispatch(name, message, { version = defaultVersion } = {}) {
  return encode(name, message, { version })
}
module.exports = {
  version,
  encode,
  decode,
  Router,
  dispatch
}
