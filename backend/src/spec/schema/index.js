// This file is autogenerated by the hyperschema compiler
// Schema Version: 2
/* eslint-disable camelcase */
/* eslint-disable quotes */

const { c } = require('hyperschema/runtime')

const VERSION = 2

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @autonote/block
const encoding0 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    c.string.preencode(state, m.pageId)
    state.end++ // max flag is 4 so always one byte

    if (m.parentId) c.string.preencode(state, m.parentId)
    c.string.preencode(state, m.type)
    if (m.content) c.string.preencode(state, m.content)
    if (m.metadata) c.string.preencode(state, m.metadata)
    c.int.preencode(state, m.position)
    c.int.preencode(state, m.createdAt)
    c.int.preencode(state, m.updatedAt)
    c.string.preencode(state, m.createdBy)
    c.string.preencode(state, m.updatedBy)
    c.int.preencode(state, m.version)
  },
  encode (state, m) {
    const flags =
      (m.parentId ? 1 : 0) |
      (m.content ? 2 : 0) |
      (m.metadata ? 4 : 0)

    c.string.encode(state, m.id)
    c.string.encode(state, m.pageId)
    c.uint.encode(state, flags)

    if (m.parentId) c.string.encode(state, m.parentId)
    c.string.encode(state, m.type)
    if (m.content) c.string.encode(state, m.content)
    if (m.metadata) c.string.encode(state, m.metadata)
    c.int.encode(state, m.position)
    c.int.encode(state, m.createdAt)
    c.int.encode(state, m.updatedAt)
    c.string.encode(state, m.createdBy)
    c.string.encode(state, m.updatedBy)
    c.int.encode(state, m.version)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      pageId: r1,
      parentId: (flags & 1) !== 0 ? c.string.decode(state) : null,
      type: c.string.decode(state),
      content: (flags & 2) !== 0 ? c.string.decode(state) : null,
      metadata: (flags & 4) !== 0 ? c.string.decode(state) : null,
      position: c.int.decode(state),
      createdAt: c.int.decode(state),
      updatedAt: c.int.decode(state),
      createdBy: c.string.decode(state),
      updatedBy: c.string.decode(state),
      version: c.int.decode(state)
    }
  }
}

// @autonote/operation
const encoding1 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    c.string.preencode(state, m.blockId)
    c.string.preencode(state, m.type)
    state.end++ // max flag is 4 so always one byte

    if (m.position) c.int.preencode(state, m.position)
    if (m.length) c.int.preencode(state, m.length)
    if (m.value) c.string.preencode(state, m.value)
    c.int.preencode(state, m.timestamp)
    c.string.preencode(state, m.author)
    c.int.preencode(state, m.baseVersion)
  },
  encode (state, m) {
    const flags =
      (m.position ? 1 : 0) |
      (m.length ? 2 : 0) |
      (m.value ? 4 : 0)

    c.string.encode(state, m.id)
    c.string.encode(state, m.blockId)
    c.string.encode(state, m.type)
    c.uint.encode(state, flags)

    if (m.position) c.int.encode(state, m.position)
    if (m.length) c.int.encode(state, m.length)
    if (m.value) c.string.encode(state, m.value)
    c.int.encode(state, m.timestamp)
    c.string.encode(state, m.author)
    c.int.encode(state, m.baseVersion)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      blockId: r1,
      type: r2,
      position: (flags & 1) !== 0 ? c.int.decode(state) : 0,
      length: (flags & 2) !== 0 ? c.int.decode(state) : 0,
      value: (flags & 4) !== 0 ? c.string.decode(state) : null,
      timestamp: c.int.decode(state),
      author: c.string.decode(state),
      baseVersion: c.int.decode(state)
    }
  }
}

// @autonote/profile
const encoding2 = {
  preencode (state, m) {
    c.string.preencode(state, m.userId)
    c.string.preencode(state, m.displayName)
    state.end++ // max flag is 2 so always one byte

    if (m.email) c.string.preencode(state, m.email)
    if (m.avatar) c.buffer.preencode(state, m.avatar)
    c.int.preencode(state, m.createdAt)
    c.int.preencode(state, m.updatedAt)
  },
  encode (state, m) {
    const flags =
      (m.email ? 1 : 0) |
      (m.avatar ? 2 : 0)

    c.string.encode(state, m.userId)
    c.string.encode(state, m.displayName)
    c.uint.encode(state, flags)

    if (m.email) c.string.encode(state, m.email)
    if (m.avatar) c.buffer.encode(state, m.avatar)
    c.int.encode(state, m.createdAt)
    c.int.encode(state, m.updatedAt)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      userId: r0,
      displayName: r1,
      email: (flags & 1) !== 0 ? c.string.decode(state) : null,
      avatar: (flags & 2) !== 0 ? c.buffer.decode(state) : null,
      createdAt: c.int.decode(state),
      updatedAt: c.int.decode(state)
    }
  }
}

// @autonote/group
const encoding3 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    c.string.preencode(state, m.name)
    state.end++ // max flag is 4 so always one byte

    if (m.parentId) c.string.preencode(state, m.parentId)
    if (m.color) c.string.preencode(state, m.color)
    if (m.icon) c.string.preencode(state, m.icon)
    c.int.preencode(state, m.createdAt)
    c.int.preencode(state, m.updatedAt)
  },
  encode (state, m) {
    const flags =
      (m.parentId ? 1 : 0) |
      (m.color ? 2 : 0) |
      (m.icon ? 4 : 0)

    c.string.encode(state, m.id)
    c.string.encode(state, m.name)
    c.uint.encode(state, flags)

    if (m.parentId) c.string.encode(state, m.parentId)
    if (m.color) c.string.encode(state, m.color)
    if (m.icon) c.string.encode(state, m.icon)
    c.int.encode(state, m.createdAt)
    c.int.encode(state, m.updatedAt)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      name: r1,
      parentId: (flags & 1) !== 0 ? c.string.decode(state) : null,
      color: (flags & 2) !== 0 ? c.string.decode(state) : null,
      icon: (flags & 4) !== 0 ? c.string.decode(state) : null,
      createdAt: c.int.decode(state),
      updatedAt: c.int.decode(state)
    }
  }
}

// @autonote/page
const encoding4 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    c.string.preencode(state, m.title)
    state.end++ // max flag is 8 so always one byte

    if (m.content) c.string.preencode(state, m.content)
    if (m.groupId) c.string.preencode(state, m.groupId)
    if (m.tags) c.string.preencode(state, m.tags)
    c.int.preencode(state, m.createdAt)
    c.int.preencode(state, m.updatedAt)
  },
  encode (state, m) {
    const flags =
      (m.content ? 1 : 0) |
      (m.groupId ? 2 : 0) |
      (m.tags ? 4 : 0) |
      (m.starred ? 8 : 0)

    c.string.encode(state, m.id)
    c.string.encode(state, m.title)
    c.uint.encode(state, flags)

    if (m.content) c.string.encode(state, m.content)
    if (m.groupId) c.string.encode(state, m.groupId)
    if (m.tags) c.string.encode(state, m.tags)
    c.int.encode(state, m.createdAt)
    c.int.encode(state, m.updatedAt)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      title: r1,
      content: (flags & 1) !== 0 ? c.string.decode(state) : null,
      groupId: (flags & 2) !== 0 ? c.string.decode(state) : null,
      tags: (flags & 4) !== 0 ? c.string.decode(state) : null,
      starred: (flags & 8) !== 0,
      createdAt: c.int.decode(state),
      updatedAt: c.int.decode(state)
    }
  }
}

// @autonote/fileref
const encoding5 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    c.string.preencode(state, m.pageId)
    c.string.preencode(state, m.filename)
    state.end++ // max flag is 8 so always one byte

    if (m.mimeType) c.string.preencode(state, m.mimeType)
    if (m.size) c.int.preencode(state, m.size)
    if (m.driveKey) c.buffer.preencode(state, m.driveKey)
    if (m.blobId) c.string.preencode(state, m.blobId)
    c.int.preencode(state, m.createdAt)
  },
  encode (state, m) {
    const flags =
      (m.mimeType ? 1 : 0) |
      (m.size ? 2 : 0) |
      (m.driveKey ? 4 : 0) |
      (m.blobId ? 8 : 0)

    c.string.encode(state, m.id)
    c.string.encode(state, m.pageId)
    c.string.encode(state, m.filename)
    c.uint.encode(state, flags)

    if (m.mimeType) c.string.encode(state, m.mimeType)
    if (m.size) c.int.encode(state, m.size)
    if (m.driveKey) c.buffer.encode(state, m.driveKey)
    if (m.blobId) c.string.encode(state, m.blobId)
    c.int.encode(state, m.createdAt)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      pageId: r1,
      filename: r2,
      mimeType: (flags & 1) !== 0 ? c.string.decode(state) : null,
      size: (flags & 2) !== 0 ? c.int.decode(state) : 0,
      driveKey: (flags & 4) !== 0 ? c.buffer.decode(state) : null,
      blobId: (flags & 8) !== 0 ? c.string.decode(state) : null,
      createdAt: c.int.decode(state)
    }
  }
}

// @autonote/writer
const encoding6 = {
  preencode (state, m) {
    c.buffer.preencode(state, m.key)
  },
  encode (state, m) {
    c.buffer.encode(state, m.key)
  },
  decode (state) {
    const r0 = c.buffer.decode(state)

    return {
      key: r0
    }
  }
}

// @autonote/delete
const encoding7 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
  },
  encode (state, m) {
    c.string.encode(state, m.id)
  },
  decode (state) {
    const r0 = c.string.decode(state)

    return {
      id: r0
    }
  }
}

// @autonote/del-invite
const encoding8 = {
  preencode (state, m) {
    c.buffer.preencode(state, m.id)
  },
  encode (state, m) {
    c.buffer.encode(state, m.id)
  },
  decode (state) {
    const r0 = c.buffer.decode(state)

    return {
      id: r0
    }
  }
}

// @autonote/invite
const encoding9 = {
  preencode (state, m) {
    c.buffer.preencode(state, m.id)
    c.buffer.preencode(state, m.invite)
    c.buffer.preencode(state, m.publicKey)
    c.int.preencode(state, m.expires)
  },
  encode (state, m) {
    c.buffer.encode(state, m.id)
    c.buffer.encode(state, m.invite)
    c.buffer.encode(state, m.publicKey)
    c.int.encode(state, m.expires)
  },
  decode (state) {
    const r0 = c.buffer.decode(state)
    const r1 = c.buffer.decode(state)
    const r2 = c.buffer.decode(state)
    const r3 = c.int.decode(state)

    return {
      id: r0,
      invite: r1,
      publicKey: r2,
      expires: r3
    }
  }
}

function setVersion (v) {
  version = v
}

function encode (name, value, v = VERSION) {
  version = v
  return c.encode(getEncoding(name), value)
}

function decode (name, buffer, v = VERSION) {
  version = v
  return c.decode(getEncoding(name), buffer)
}

function getEnum (name) {
  switch (name) {
    default: throw new Error('Enum not found ' + name)
  }
}

function getEncoding (name) {
  switch (name) {
    case '@autonote/block': return encoding0
    case '@autonote/operation': return encoding1
    case '@autonote/profile': return encoding2
    case '@autonote/group': return encoding3
    case '@autonote/page': return encoding4
    case '@autonote/fileref': return encoding5
    case '@autonote/writer': return encoding6
    case '@autonote/delete': return encoding7
    case '@autonote/del-invite': return encoding8
    case '@autonote/invite': return encoding9
    default: throw new Error('Encoder not found ' + name)
  }
}

function getStruct (name, v = VERSION) {
  const enc = getEncoding(name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

const resolveStruct = getStruct // compat

module.exports = { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }
